package com.adp.autopay.lsf.admin;

import com.adp.autopay.cci.security.CciLoginException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@Slf4j
@Controller
public class LsfAdminController {
    
    @Autowired
    private PropertyManager propertyManager;
    
    @Autowired
    private LsfAdminDatabase lsfAdminDatabase;

    protected void sessionTimeout(HttpServletRequest req, Model model) {
        model.addAttribute("errorMessage", "Session Timed Out");
        model.addAttribute("sessionTimeout", true);
        // return "sessionTimeout";
    }

    protected void sendFatalError(HttpServletRequest req, Model model, String message, 
                                String error1, String error2, String error3, String error4, 
                                boolean sessionTimeout) {
        model.addAttribute("errorMessage", message);
        model.addAttribute("error1", error1);
        model.addAttribute("error2", error2);
        model.addAttribute("error3", error3);
        model.addAttribute("error4", error4);
        model.addAttribute("sessionTimeout", sessionTimeout);
        // return "fatalError";
    }

    protected void obtainDataSource(HttpServletRequest req, LsfAdminDataBean dataBean) 
            throws LsfAdminException {
        // Implementation for obtaining data source
        // This would typically use JNDI lookup or Spring's DataSource
    }

    protected void getParameters(LsfAdminDataBean dataBean) {
        // Implementation for getting parameters from web.xml or properties
        if (propertyManager.isInitialized()) {
            dataBean.setDbName(propertyManager.getProperty("db.name"));
            dataBean.setDbSchema(propertyManager.getProperty("db.schema"));
            dataBean.setLocalDbName(propertyManager.getProperty("db.local.name"));
            dataBean.setUseSingleDataSource(Boolean.parseBoolean(
                propertyManager.getProperty("db.useSingleDataSource")));
            // Set other parameters...
        }
    }

    protected void forwardToLoginProcessor(HttpServletRequest req, Model model, 
                                         LsfAdminDataBean dataBean) {
        dataBean.setTransactionId("LSFRS");
        model.addAttribute("lsfAdminDataBean", dataBean);
        // return "forward:/loginProcessor";
    }

    protected String parseDbName(String pathInfo) {
        if (pathInfo == null || pathInfo.length() < 3) return "";
        return pathInfo.substring(1, 3).toUpperCase();
    }

    protected String parseDbSchema(String pathInfo) {
        if (pathInfo == null || pathInfo.length() < 6) return "";
        return pathInfo.substring(4, 6).toUpperCase();
    }

    protected void trace(String message, LsfAdminDataBean dataBean) {
        if (dataBean != null && dataBean.isTrace()) {
            log.info("TRACE: {}", message);
        }
    }

    @ExceptionHandler(LsfAdminException.class)
    public String handleLsfAdminException(LsfAdminException e, Model model) {
        log.error("LSF Admin Exception: {}", e.getMessage());
        model.addAttribute("errorMessage", e.getMessage());
        model.addAttribute("error1", e.getErrorMessage1());
        model.addAttribute("error2", e.getErrorMessage2());
        model.addAttribute("error3", e.getErrorMessage3());
        model.addAttribute("error4", e.getErrorMessage4());
        return "error";
    }

    @ExceptionHandler(CciLoginException.class)
    public String handleCciLoginException(CciLoginException e, Model model) {
        log.error("CCI Login Exception: {}", e.getMessage());
        model.addAttribute("errorMessage", e.getMessage());
        return "loginError";
    }

    protected HttpSession getSession(HttpServletRequest req, boolean create) {
        return req.getSession(create);
    }

    protected void invalidateSession(HttpServletRequest req) {
        HttpSession session = req.getSession(false);
        if (session != null) {
            session.invalidate();
        }
    }
}
